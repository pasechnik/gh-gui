// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Users /> Renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    doLoginSet={[Function]}
    doUserSet={[Function]}
    doUsers={[Function]}
    loading={false}
    login="test"
    users={Array []}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Col
          md={2}
          tag="div"
          widths={
                    Array [
                              "xs",
                              "sm",
                              "md",
                              "lg",
                              "xl",
                            ]
          }
>
          <Label
                    for="login"
                    tag="label"
                    widths={
                              Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                    }
          >
                    User login
          </Label>
</Col>,
        <Col
          md={10}
          tag="div"
          widths={
                    Array [
                              "xs",
                              "sm",
                              "md",
                              "lg",
                              "xl",
                            ]
          }
>
          <FormGroup
                    tag="div"
          >
                    <AsyncContainer(OnClickOutside(TypeaheadContainer(WrappedTypeahead)))
                              defaultInputValue="test"
                              delay={200}
                              id="inputsearch"
                              isLoading={false}
                              labelKey="login"
                              minLength={3}
                              onChange={[Function]}
                              onInputChange={[Function]}
                              onSearch={[Function]}
                              options={Array []}
                              placeholder="Search for a Github user..."
                              promptText="Type to search..."
                              searchText="Searching..."
                              useCache={true}
                    />
          </FormGroup>
</Col>,
      ],
      "tag": "div",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Label
            for="login"
            tag="label"
            widths={
                        Array [
                                    "xs",
                                    "sm",
                                    "md",
                                    "lg",
                                    "xl",
                                  ]
            }
>
            User login
</Label>,
          "md": 2,
          "tag": "div",
          "widths": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "User login",
            "for": "login",
            "tag": "label",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": "User login",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <FormGroup
            tag="div"
>
            <AsyncContainer(OnClickOutside(TypeaheadContainer(WrappedTypeahead)))
                        defaultInputValue="test"
                        delay={200}
                        id="inputsearch"
                        isLoading={false}
                        labelKey="login"
                        minLength={3}
                        onChange={[Function]}
                        onInputChange={[Function]}
                        onSearch={[Function]}
                        options={Array []}
                        placeholder="Search for a Github user..."
                        promptText="Type to search..."
                        searchText="Searching..."
                        useCache={true}
            />
</FormGroup>,
          "md": 10,
          "tag": "div",
          "widths": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <AsyncContainer(OnClickOutside(TypeaheadContainer(WrappedTypeahead)))
              defaultInputValue="test"
              delay={200}
              id="inputsearch"
              isLoading={false}
              labelKey="login"
              minLength={3}
              onChange={[Function]}
              onInputChange={[Function]}
              onSearch={[Function]}
              options={Array []}
              placeholder="Search for a Github user..."
              promptText="Type to search..."
              searchText="Searching..."
              useCache={true}
/>,
            "tag": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultInputValue": "test",
              "delay": 200,
              "id": "inputsearch",
              "isLoading": false,
              "labelKey": "login",
              "minLength": 3,
              "onChange": [Function],
              "onInputChange": [Function],
              "onSearch": [Function],
              "options": Array [],
              "placeholder": "Search for a Github user...",
              "promptText": "Type to search...",
              "searchText": "Searching...",
              "useCache": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Col
            md={2}
            tag="div"
            widths={
                        Array [
                                    "xs",
                                    "sm",
                                    "md",
                                    "lg",
                                    "xl",
                                  ]
            }
>
            <Label
                        for="login"
                        tag="label"
                        widths={
                                    Array [
                                                "xs",
                                                "sm",
                                                "md",
                                                "lg",
                                                "xl",
                                              ]
                        }
            >
                        User login
            </Label>
</Col>,
          <Col
            md={10}
            tag="div"
            widths={
                        Array [
                                    "xs",
                                    "sm",
                                    "md",
                                    "lg",
                                    "xl",
                                  ]
            }
>
            <FormGroup
                        tag="div"
            >
                        <AsyncContainer(OnClickOutside(TypeaheadContainer(WrappedTypeahead)))
                                    defaultInputValue="test"
                                    delay={200}
                                    id="inputsearch"
                                    isLoading={false}
                                    labelKey="login"
                                    minLength={3}
                                    onChange={[Function]}
                                    onInputChange={[Function]}
                                    onSearch={[Function]}
                                    options={Array []}
                                    placeholder="Search for a Github user..."
                                    promptText="Type to search..."
                                    searchText="Searching..."
                                    useCache={true}
                        />
            </FormGroup>
</Col>,
        ],
        "tag": "div",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Label
              for="login"
              tag="label"
              widths={
                            Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
              }
>
              User login
</Label>,
            "md": 2,
            "tag": "div",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "User login",
              "for": "login",
              "tag": "label",
              "widths": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
            },
            "ref": null,
            "rendered": "User login",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <FormGroup
              tag="div"
>
              <AsyncContainer(OnClickOutside(TypeaheadContainer(WrappedTypeahead)))
                            defaultInputValue="test"
                            delay={200}
                            id="inputsearch"
                            isLoading={false}
                            labelKey="login"
                            minLength={3}
                            onChange={[Function]}
                            onInputChange={[Function]}
                            onSearch={[Function]}
                            options={Array []}
                            placeholder="Search for a Github user..."
                            promptText="Type to search..."
                            searchText="Searching..."
                            useCache={true}
              />
</FormGroup>,
            "md": 10,
            "tag": "div",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <AsyncContainer(OnClickOutside(TypeaheadContainer(WrappedTypeahead)))
                defaultInputValue="test"
                delay={200}
                id="inputsearch"
                isLoading={false}
                labelKey="login"
                minLength={3}
                onChange={[Function]}
                onInputChange={[Function]}
                onSearch={[Function]}
                options={Array []}
                placeholder="Search for a Github user..."
                promptText="Type to search..."
                searchText="Searching..."
                useCache={true}
/>,
              "tag": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "defaultInputValue": "test",
                "delay": 200,
                "id": "inputsearch",
                "isLoading": false,
                "labelKey": "login",
                "minLength": 3,
                "onChange": [Function],
                "onInputChange": [Function],
                "onSearch": [Function],
                "options": Array [],
                "placeholder": "Search for a Github user...",
                "promptText": "Type to search...",
                "searchText": "Searching...",
                "useCache": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
